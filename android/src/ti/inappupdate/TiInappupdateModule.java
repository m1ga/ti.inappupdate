/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.inappupdate;

import android.app.Activity;
import android.content.Intent;

import com.google.android.play.core.appupdate.AppUpdateInfo;
import com.google.android.play.core.appupdate.AppUpdateManager;
import com.google.android.play.core.appupdate.AppUpdateManagerFactory;
import com.google.android.play.core.install.model.AppUpdateType;
import com.google.android.play.core.install.model.UpdateAvailability;
import com.google.android.gms.tasks.Task;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;

@Kroll.module(name = "TiInappupdate", id = "ti.inappupdate")
public class TiInappupdateModule extends KrollModule implements TiActivityResultHandler {

    // Standard Debugging variables
    private static final String LCAT = "TiInappupdateModule";
    private static final boolean DBG = TiConfig.LOGD;
    AppUpdateManager appUpdateManager;
    Task<AppUpdateInfo> appUpdateInfoTask;
    int MY_REQUEST_CODE = 1;
    AppUpdateInfo appUpdateInfo;

    public TiInappupdateModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
        Log.d(LCAT, "inside onAppCreate");
        // put module init code that needs to run when the application is created
    }

    // Methods
    @Kroll.method
    public void checkForUpdate() {
        appUpdateManager = AppUpdateManagerFactory.create(TiApplication.getAppCurrentActivity());

        appUpdateInfoTask = appUpdateManager.getAppUpdateInfo();

        appUpdateInfoTask.addOnSuccessListener(_appUpdateInfo -> {
            appUpdateInfo = _appUpdateInfo;
            KrollDict kd = new KrollDict();

            if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE
                    && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)) {
                Log.d(LCAT, "Update available");
                kd.put("update", true);
            } else {
                kd.put("update", false);
                Log.d(LCAT, "No update available");
            }
            fireEvent("update", kd);
        });

    }

    // Methods
    @Kroll.method
    public void startUpdate() {
        Log.d(LCAT, "Starting update...");
        try {
            appUpdateManager.startUpdateFlowForResult(
                    appUpdateInfo,
                    AppUpdateType.IMMEDIATE,
                    TiApplication.getAppCurrentActivity(),
                    MY_REQUEST_CODE);
        } catch (Exception e) {
            //
            KrollDict kd = new KrollDict();
            kd.put("message", e.getMessage());
            fireEvent("error", kd);
        }
    }

    @Kroll.method
    public void resumeUpdate() {
        appUpdateManager
                .getAppUpdateInfo()
                .addOnSuccessListener(appUpdateInfo -> {
                    if (appUpdateInfo.updateAvailability()
                            == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS) {

                        fireEvent("resume", new KrollDict());

                        try {
                        // If an in-app update is already running, resume the update.
                        appUpdateManager.startUpdateFlowForResult(
                                appUpdateInfo,
                                AppUpdateType.IMMEDIATE,
                                TiApplication.getAppCurrentActivity(),
                                MY_REQUEST_CODE);
                        } catch (Exception e) {
                            //
                            KrollDict kd = new KrollDict();
                            kd.put("message", e.getMessage());
                            fireEvent("error", kd);
                        }
                    }

                });

    }

    @Override
    public void onResult(Activity activity, int requestCode, int resultCode, Intent data) {
        Log.d(LCAT, "Update result: " + requestCode);
        if (requestCode == MY_REQUEST_CODE) {
            if (resultCode != Activity.RESULT_OK) {
                //
                KrollDict kd = new KrollDict();
                kd.put("cancel", true);
                fireEvent("error", kd);
            } else {
                KrollDict kd = new KrollDict();
                fireEvent("done", kd);
            }
        }
    }

    @Override
    public void onError(Activity activity, int i, Exception e) {

    }
}

